/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

package io.golgi.example.gen;

import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Iterator;
import com.openmindnetworks.golgi.JavaType;
import com.openmindnetworks.golgi.GolgiPayload;
import com.openmindnetworks.golgi.B64;
import com.openmindnetworks.golgi.api.*;

public interface TapTelegraphService{
    public static class startGame{
        public interface ResultSender{
            public void success();
        }

        public interface ResultReceiver extends ResultSender{
            public void failure(GolgiException ex);
        }

        public static class InboundResponseHandler implements GolgiAPIIBResponseHandler{
            private ResultReceiver resultReceiver;
            @Override
            public void error(int errType, String errText){
                GolgiException ex = new GolgiException();
                ex.setErrType(errType);
                ex.setErrText(errText);
                resultReceiver.failure(ex);
            }
            @Override
            public void remoteResponse(String payload){
                TapTelegraph_startGame_rspArg rsp;
                rsp = new TapTelegraph_startGame_rspArg(payload);
                if(rsp == null || rsp.isCorrupt()){
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(1)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
                if(rsp.getInternalSuccess_() != 0){
                    resultReceiver.success();
                }
                else{
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(2)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
            }
            public InboundResponseHandler(ResultReceiver resultReceiver){
                this.resultReceiver = resultReceiver;
            }
        }

        public static void sendTo(ResultReceiver receiver, GolgiTransportOptions cto, String destination, PlayerInfo playerInfo){
            TapTelegraph_startGame_reqArg arg = new TapTelegraph_startGame_reqArg();

            arg.setPlayerInfo(playerInfo);

            StringBuffer sb = arg.serialise();
            GolgiAPI.getInstance().sendRequest(new InboundResponseHandler(receiver), cto, destination, "startGame.TapTelegraph", sb.toString());
        }

        public static void sendTo(ResultReceiver receiver, String destination, PlayerInfo playerInfo){
            sendTo(receiver, null, destination, playerInfo);
        }

        public interface RequestReceiver{
            public void receiveFrom(ResultSender resultSender, PlayerInfo playerInfo);
        }

        public static class InboundRequestReceiver implements GolgiAPIRequestReceiver,ResultSender{
            private RequestReceiver requestReceiver;
            private GolgiAPIOBResponseHandler obResponseSender;

            @Override
            public void incomingRequest(GolgiAPIOBResponseHandler handler, String payload){
                this.obResponseSender = handler;

                TapTelegraph_startGame_reqArg arg = new TapTelegraph_startGame_reqArg(payload);
                if(arg.isCorrupt()){
                    handler.remotePayloadError();
                    return;
                }
                requestReceiver.receiveFrom(this, arg.getPlayerInfo());
            }

            @Override
            public void success(){
                TapTelegraph_startGame_rspArg rspArg = new TapTelegraph_startGame_rspArg(false);
                rspArg.setInternalSuccess_(1);
                obResponseSender.send(rspArg.serialise().toString());
            }

            public InboundRequestReceiver(RequestReceiver requestReceiver){
                this.requestReceiver = requestReceiver;
            }
        }

        public static void registerReceiver(RequestReceiver requestReceiver){
           GolgiAPI.getInstance().registerReqReceiver(new InboundRequestReceiver(requestReceiver), "startGame.TapTelegraph");
        }

    }
    public static class sendTap{
        public interface ResultSender{
            public void success();
        }

        public interface ResultReceiver extends ResultSender{
            public void failure(GolgiException ex);
        }

        public static class InboundResponseHandler implements GolgiAPIIBResponseHandler{
            private ResultReceiver resultReceiver;
            @Override
            public void error(int errType, String errText){
                GolgiException ex = new GolgiException();
                ex.setErrType(errType);
                ex.setErrText(errText);
                resultReceiver.failure(ex);
            }
            @Override
            public void remoteResponse(String payload){
                TapTelegraph_sendTap_rspArg rsp;
                rsp = new TapTelegraph_sendTap_rspArg(payload);
                if(rsp == null || rsp.isCorrupt()){
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(1)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
                if(rsp.getInternalSuccess_() != 0){
                    resultReceiver.success();
                }
                else{
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(2)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
            }
            public InboundResponseHandler(ResultReceiver resultReceiver){
                this.resultReceiver = resultReceiver;
            }
        }

        public static void sendTo(ResultReceiver receiver, GolgiTransportOptions cto, String destination, TapData tapData){
            TapTelegraph_sendTap_reqArg arg = new TapTelegraph_sendTap_reqArg();

            arg.setTapData(tapData);

            StringBuffer sb = arg.serialise();
            GolgiAPI.getInstance().sendRequest(new InboundResponseHandler(receiver), cto, destination, "sendTap.TapTelegraph", sb.toString());
        }

        public static void sendTo(ResultReceiver receiver, String destination, TapData tapData){
            sendTo(receiver, null, destination, tapData);
        }

        public interface RequestReceiver{
            public void receiveFrom(ResultSender resultSender, TapData tapData);
        }

        public static class InboundRequestReceiver implements GolgiAPIRequestReceiver,ResultSender{
            private RequestReceiver requestReceiver;
            private GolgiAPIOBResponseHandler obResponseSender;

            @Override
            public void incomingRequest(GolgiAPIOBResponseHandler handler, String payload){
                this.obResponseSender = handler;

                TapTelegraph_sendTap_reqArg arg = new TapTelegraph_sendTap_reqArg(payload);
                if(arg.isCorrupt()){
                    handler.remotePayloadError();
                    return;
                }
                requestReceiver.receiveFrom(this, arg.getTapData());
            }

            @Override
            public void success(){
                TapTelegraph_sendTap_rspArg rspArg = new TapTelegraph_sendTap_rspArg(false);
                rspArg.setInternalSuccess_(1);
                obResponseSender.send(rspArg.serialise().toString());
            }

            public InboundRequestReceiver(RequestReceiver requestReceiver){
                this.requestReceiver = requestReceiver;
            }
        }

        public static void registerReceiver(RequestReceiver requestReceiver){
           GolgiAPI.getInstance().registerReqReceiver(new InboundRequestReceiver(requestReceiver), "sendTap.TapTelegraph");
        }

    }
    public static class gameOver{
        public interface ResultSender{
            public void success();
        }

        public interface ResultReceiver extends ResultSender{
            public void failure(GolgiException ex);
        }

        public static class InboundResponseHandler implements GolgiAPIIBResponseHandler{
            private ResultReceiver resultReceiver;
            @Override
            public void error(int errType, String errText){
                GolgiException ex = new GolgiException();
                ex.setErrType(errType);
                ex.setErrText(errText);
                resultReceiver.failure(ex);
            }
            @Override
            public void remoteResponse(String payload){
                TapTelegraph_gameOver_rspArg rsp;
                rsp = new TapTelegraph_gameOver_rspArg(payload);
                if(rsp == null || rsp.isCorrupt()){
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(1)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
                if(rsp.getInternalSuccess_() != 0){
                    resultReceiver.success();
                }
                else{
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(2)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
            }
            public InboundResponseHandler(ResultReceiver resultReceiver){
                this.resultReceiver = resultReceiver;
            }
        }

        public static void sendTo(ResultReceiver receiver, GolgiTransportOptions cto, String destination, GameOverData gameOverData){
            TapTelegraph_gameOver_reqArg arg = new TapTelegraph_gameOver_reqArg();

            arg.setGameOverData(gameOverData);

            StringBuffer sb = arg.serialise();
            GolgiAPI.getInstance().sendRequest(new InboundResponseHandler(receiver), cto, destination, "gameOver.TapTelegraph", sb.toString());
        }

        public static void sendTo(ResultReceiver receiver, String destination, GameOverData gameOverData){
            sendTo(receiver, null, destination, gameOverData);
        }

        public interface RequestReceiver{
            public void receiveFrom(ResultSender resultSender, GameOverData gameOverData);
        }

        public static class InboundRequestReceiver implements GolgiAPIRequestReceiver,ResultSender{
            private RequestReceiver requestReceiver;
            private GolgiAPIOBResponseHandler obResponseSender;

            @Override
            public void incomingRequest(GolgiAPIOBResponseHandler handler, String payload){
                this.obResponseSender = handler;

                TapTelegraph_gameOver_reqArg arg = new TapTelegraph_gameOver_reqArg(payload);
                if(arg.isCorrupt()){
                    handler.remotePayloadError();
                    return;
                }
                requestReceiver.receiveFrom(this, arg.getGameOverData());
            }

            @Override
            public void success(){
                TapTelegraph_gameOver_rspArg rspArg = new TapTelegraph_gameOver_rspArg(false);
                rspArg.setInternalSuccess_(1);
                obResponseSender.send(rspArg.serialise().toString());
            }

            public InboundRequestReceiver(RequestReceiver requestReceiver){
                this.requestReceiver = requestReceiver;
            }
        }

        public static void registerReceiver(RequestReceiver requestReceiver){
           GolgiAPI.getInstance().registerReqReceiver(new InboundRequestReceiver(requestReceiver), "gameOver.TapTelegraph");
        }

    }
    public static class streamGame{
        public interface ResultSender{
            public void success();
        }

        public interface ResultReceiver extends ResultSender{
            public void failure(GolgiException ex);
        }

        public static class InboundResponseHandler implements GolgiAPIIBResponseHandler{
            private ResultReceiver resultReceiver;
            @Override
            public void error(int errType, String errText){
                GolgiException ex = new GolgiException();
                ex.setErrType(errType);
                ex.setErrText(errText);
                resultReceiver.failure(ex);
            }
            @Override
            public void remoteResponse(String payload){
                TapTelegraph_streamGame_rspArg rsp;
                rsp = new TapTelegraph_streamGame_rspArg(payload);
                if(rsp == null || rsp.isCorrupt()){
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(1)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
                if(rsp.getInternalSuccess_() != 0){
                    resultReceiver.success();
                }
                else{
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(2)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
            }
            public InboundResponseHandler(ResultReceiver resultReceiver){
                this.resultReceiver = resultReceiver;
            }
        }

        public static void sendTo(ResultReceiver receiver, GolgiTransportOptions cto, String destination, String golgiId){
            TapTelegraph_streamGame_reqArg arg = new TapTelegraph_streamGame_reqArg();

            arg.setGolgiId(golgiId);

            StringBuffer sb = arg.serialise();
            GolgiAPI.getInstance().sendRequest(new InboundResponseHandler(receiver), cto, destination, "streamGame.TapTelegraph", sb.toString());
        }

        public static void sendTo(ResultReceiver receiver, String destination, String golgiId){
            sendTo(receiver, null, destination, golgiId);
        }

        public interface RequestReceiver{
            public void receiveFrom(ResultSender resultSender, String golgiId);
        }

        public static class InboundRequestReceiver implements GolgiAPIRequestReceiver,ResultSender{
            private RequestReceiver requestReceiver;
            private GolgiAPIOBResponseHandler obResponseSender;

            @Override
            public void incomingRequest(GolgiAPIOBResponseHandler handler, String payload){
                this.obResponseSender = handler;

                TapTelegraph_streamGame_reqArg arg = new TapTelegraph_streamGame_reqArg(payload);
                if(arg.isCorrupt()){
                    handler.remotePayloadError();
                    return;
                }
                requestReceiver.receiveFrom(this, arg.getGolgiId());
            }

            @Override
            public void success(){
                TapTelegraph_streamGame_rspArg rspArg = new TapTelegraph_streamGame_rspArg(false);
                rspArg.setInternalSuccess_(1);
                obResponseSender.send(rspArg.serialise().toString());
            }

            public InboundRequestReceiver(RequestReceiver requestReceiver){
                this.requestReceiver = requestReceiver;
            }
        }

        public static void registerReceiver(RequestReceiver requestReceiver){
           GolgiAPI.getInstance().registerReqReceiver(new InboundRequestReceiver(requestReceiver), "streamGame.TapTelegraph");
        }

    }
    public static class getHiScore{
        public interface ResultSender{
            public void success(HiScoreData result);
            public void failure(GolgiException golgiException);
        }

        public interface ResultReceiver extends ResultSender{
            public void failure(GolgiException ex);
        }

        public static class InboundResponseHandler implements GolgiAPIIBResponseHandler{
            private ResultReceiver resultReceiver;
            @Override
            public void error(int errType, String errText){
                GolgiException ex = new GolgiException();
                ex.setErrType(errType);
                ex.setErrText(errText);
                resultReceiver.failure(ex);
            }
            @Override
            public void remoteResponse(String payload){
                TapTelegraph_getHiScore_rspArg rsp;
                rsp = new TapTelegraph_getHiScore_rspArg(payload);
                if(rsp == null || rsp.isCorrupt()){
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(1)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
                if(rsp.getInternalSuccess_() != 0 && rsp.resultIsSet()){
                    resultReceiver.success(rsp.getResult());
                }
                else if(rsp.golgiExceptionIsSet()){
                    resultReceiver.failure(rsp.getGolgiException());
                }
                else{
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(2)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
            }
            public InboundResponseHandler(ResultReceiver resultReceiver){
                this.resultReceiver = resultReceiver;
            }
        }

        public static void sendTo(ResultReceiver receiver, GolgiTransportOptions cto, String destination, int pooky){
            TapTelegraph_getHiScore_reqArg arg = new TapTelegraph_getHiScore_reqArg();

            arg.setPooky(pooky);

            StringBuffer sb = arg.serialise();
            GolgiAPI.getInstance().sendRequest(new InboundResponseHandler(receiver), cto, destination, "getHiScore.TapTelegraph", sb.toString());
        }

        public static void sendTo(ResultReceiver receiver, String destination, int pooky){
            sendTo(receiver, null, destination, pooky);
        }

        public interface RequestReceiver{
            public void receiveFrom(ResultSender resultSender, int pooky);
        }

        public static class InboundRequestReceiver implements GolgiAPIRequestReceiver,ResultSender{
            private RequestReceiver requestReceiver;
            private GolgiAPIOBResponseHandler obResponseSender;

            @Override
            public void incomingRequest(GolgiAPIOBResponseHandler handler, String payload){
                this.obResponseSender = handler;

                TapTelegraph_getHiScore_reqArg arg = new TapTelegraph_getHiScore_reqArg(payload);
                if(arg.isCorrupt()){
                    handler.remotePayloadError();
                    return;
                }
                requestReceiver.receiveFrom(this, arg.getPooky());
            }

            @Override
            public void success(HiScoreData result){
                TapTelegraph_getHiScore_rspArg rspArg = new TapTelegraph_getHiScore_rspArg(false);
                rspArg.setInternalSuccess_(1);
                rspArg.setResult(result);
                obResponseSender.send(rspArg.serialise().toString());
            }
            @Override
            public void failure(GolgiException golgiException){
                TapTelegraph_getHiScore_rspArg rspArg = new TapTelegraph_getHiScore_rspArg(false);
                rspArg.setInternalSuccess_(0);
                rspArg.setGolgiException(golgiException);
                obResponseSender.send(rspArg.serialise().toString());
            }

            public InboundRequestReceiver(RequestReceiver requestReceiver){
                this.requestReceiver = requestReceiver;
            }
        }

        public static void registerReceiver(RequestReceiver requestReceiver){
           GolgiAPI.getInstance().registerReqReceiver(new InboundRequestReceiver(requestReceiver), "getHiScore.TapTelegraph");
        }

    }
    public static class newHiScore{
        public interface ResultSender{
            public void success();
        }

        public interface ResultReceiver extends ResultSender{
            public void failure(GolgiException ex);
        }

        public static class InboundResponseHandler implements GolgiAPIIBResponseHandler{
            private ResultReceiver resultReceiver;
            @Override
            public void error(int errType, String errText){
                GolgiException ex = new GolgiException();
                ex.setErrType(errType);
                ex.setErrText(errText);
                resultReceiver.failure(ex);
            }
            @Override
            public void remoteResponse(String payload){
                TapTelegraph_newHiScore_rspArg rsp;
                rsp = new TapTelegraph_newHiScore_rspArg(payload);
                if(rsp == null || rsp.isCorrupt()){
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(1)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
                if(rsp.getInternalSuccess_() != 0){
                    resultReceiver.success();
                }
                else{
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(2)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
            }
            public InboundResponseHandler(ResultReceiver resultReceiver){
                this.resultReceiver = resultReceiver;
            }
        }

        public static void sendTo(ResultReceiver receiver, GolgiTransportOptions cto, String destination, HiScoreData hiScoreData){
            TapTelegraph_newHiScore_reqArg arg = new TapTelegraph_newHiScore_reqArg();

            arg.setHiScoreData(hiScoreData);

            StringBuffer sb = arg.serialise();
            GolgiAPI.getInstance().sendRequest(new InboundResponseHandler(receiver), cto, destination, "newHiScore.TapTelegraph", sb.toString());
        }

        public static void sendTo(ResultReceiver receiver, String destination, HiScoreData hiScoreData){
            sendTo(receiver, null, destination, hiScoreData);
        }

        public interface RequestReceiver{
            public void receiveFrom(ResultSender resultSender, HiScoreData hiScoreData);
        }

        public static class InboundRequestReceiver implements GolgiAPIRequestReceiver,ResultSender{
            private RequestReceiver requestReceiver;
            private GolgiAPIOBResponseHandler obResponseSender;

            @Override
            public void incomingRequest(GolgiAPIOBResponseHandler handler, String payload){
                this.obResponseSender = handler;

                TapTelegraph_newHiScore_reqArg arg = new TapTelegraph_newHiScore_reqArg(payload);
                if(arg.isCorrupt()){
                    handler.remotePayloadError();
                    return;
                }
                requestReceiver.receiveFrom(this, arg.getHiScoreData());
            }

            @Override
            public void success(){
                TapTelegraph_newHiScore_rspArg rspArg = new TapTelegraph_newHiScore_rspArg(false);
                rspArg.setInternalSuccess_(1);
                obResponseSender.send(rspArg.serialise().toString());
            }

            public InboundRequestReceiver(RequestReceiver requestReceiver){
                this.requestReceiver = requestReceiver;
            }
        }

        public static void registerReceiver(RequestReceiver requestReceiver){
           GolgiAPI.getInstance().registerReqReceiver(new InboundRequestReceiver(requestReceiver), "newHiScore.TapTelegraph");
        }

    }
    public static class newPB{
        public interface ResultSender{
            public void success();
        }

        public interface ResultReceiver extends ResultSender{
            public void failure(GolgiException ex);
        }

        public static class InboundResponseHandler implements GolgiAPIIBResponseHandler{
            private ResultReceiver resultReceiver;
            @Override
            public void error(int errType, String errText){
                GolgiException ex = new GolgiException();
                ex.setErrType(errType);
                ex.setErrText(errText);
                resultReceiver.failure(ex);
            }
            @Override
            public void remoteResponse(String payload){
                TapTelegraph_newPB_rspArg rsp;
                rsp = new TapTelegraph_newPB_rspArg(payload);
                if(rsp == null || rsp.isCorrupt()){
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(1)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
                if(rsp.getInternalSuccess_() != 0){
                    resultReceiver.success();
                }
                else{
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(2)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
            }
            public InboundResponseHandler(ResultReceiver resultReceiver){
                this.resultReceiver = resultReceiver;
            }
        }

        public static void sendTo(ResultReceiver receiver, GolgiTransportOptions cto, String destination, HiScoreData hiScoreData){
            TapTelegraph_newPB_reqArg arg = new TapTelegraph_newPB_reqArg();

            arg.setHiScoreData(hiScoreData);

            StringBuffer sb = arg.serialise();
            GolgiAPI.getInstance().sendRequest(new InboundResponseHandler(receiver), cto, destination, "newPB.TapTelegraph", sb.toString());
        }

        public static void sendTo(ResultReceiver receiver, String destination, HiScoreData hiScoreData){
            sendTo(receiver, null, destination, hiScoreData);
        }

        public interface RequestReceiver{
            public void receiveFrom(ResultSender resultSender, HiScoreData hiScoreData);
        }

        public static class InboundRequestReceiver implements GolgiAPIRequestReceiver,ResultSender{
            private RequestReceiver requestReceiver;
            private GolgiAPIOBResponseHandler obResponseSender;

            @Override
            public void incomingRequest(GolgiAPIOBResponseHandler handler, String payload){
                this.obResponseSender = handler;

                TapTelegraph_newPB_reqArg arg = new TapTelegraph_newPB_reqArg(payload);
                if(arg.isCorrupt()){
                    handler.remotePayloadError();
                    return;
                }
                requestReceiver.receiveFrom(this, arg.getHiScoreData());
            }

            @Override
            public void success(){
                TapTelegraph_newPB_rspArg rspArg = new TapTelegraph_newPB_rspArg(false);
                rspArg.setInternalSuccess_(1);
                obResponseSender.send(rspArg.serialise().toString());
            }

            public InboundRequestReceiver(RequestReceiver requestReceiver){
                this.requestReceiver = requestReceiver;
            }
        }

        public static void registerReceiver(RequestReceiver requestReceiver){
           GolgiAPI.getInstance().registerReqReceiver(new InboundRequestReceiver(requestReceiver), "newPB.TapTelegraph");
        }

    }
}
