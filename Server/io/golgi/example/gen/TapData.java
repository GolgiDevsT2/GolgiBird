/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

package io.golgi.example.gen;

import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Iterator;
import com.openmindnetworks.golgi.JavaType;
import com.openmindnetworks.golgi.GolgiPayload;
import com.openmindnetworks.golgi.B64;
import com.openmindnetworks.golgi.api.GolgiException;

public class TapData
{

    private boolean corrupt = false;

    public boolean isCorrupt() {
        return corrupt;
    }

    public void setCorrupt() {
        corrupt = true;
    }

    private boolean gameIdIsSet = false;
    private String gameId;
    private boolean screenOffsetIsSet = false;
    private int screenOffset;
    private boolean playerYIsSet = false;
    private int playerY;
    private boolean deltaYIsSet = false;
    private int deltaY;
    private boolean indexIsSet = false;
    private int index;
    private boolean scoreIsSet = false;
    private int score;

    public String getGameId(){
        return gameId;
    }
    public boolean gameIdIsSet(){
        return gameIdIsSet;
    }
    public void setGameId(String gameId){
        this.gameId = gameId;
        this.gameIdIsSet = true;
    }

    public int getScreenOffset(){
        return screenOffset;
    }
    public boolean screenOffsetIsSet(){
        return screenOffsetIsSet;
    }
    public void setScreenOffset(int screenOffset){
        this.screenOffset = screenOffset;
        this.screenOffsetIsSet = true;
    }

    public int getPlayerY(){
        return playerY;
    }
    public boolean playerYIsSet(){
        return playerYIsSet;
    }
    public void setPlayerY(int playerY){
        this.playerY = playerY;
        this.playerYIsSet = true;
    }

    public int getDeltaY(){
        return deltaY;
    }
    public boolean deltaYIsSet(){
        return deltaYIsSet;
    }
    public void setDeltaY(int deltaY){
        this.deltaY = deltaY;
        this.deltaYIsSet = true;
    }

    public int getIndex(){
        return index;
    }
    public boolean indexIsSet(){
        return indexIsSet;
    }
    public void setIndex(int index){
        this.index = index;
        this.indexIsSet = true;
    }

    public int getScore(){
        return score;
    }
    public boolean scoreIsSet(){
        return scoreIsSet;
    }
    public void setScore(int score){
        this.score = score;
        this.scoreIsSet = true;
    }

    public StringBuffer serialise(){
        return serialise(null);
    }

    public StringBuffer serialise(StringBuffer sb){
        return serialise("", sb);
    }

    public StringBuffer serialise(String prefix, StringBuffer sb){
        if(sb == null){
            sb = new StringBuffer();
        }

        if(this.gameIdIsSet){
            sb.append(prefix + "1: " + JavaType.encodeString(this.gameId) + "\n");
        }
        if(this.screenOffsetIsSet){
            sb.append(prefix + "2: " + this.screenOffset+"\n");
        }
        if(this.playerYIsSet){
            sb.append(prefix + "3: " + this.playerY+"\n");
        }
        if(this.deltaYIsSet){
            sb.append(prefix + "4: " + this.deltaY+"\n");
        }
        if(this.indexIsSet){
            sb.append(prefix + "5: " + this.index+"\n");
        }
        if(this.scoreIsSet){
            sb.append(prefix + "6: " + this.score+"\n");
        }

        return sb;
    }

    private void deserialise(GolgiPayload payload){
        if(!isCorrupt() && payload.containsFieldKey("1:")){
            String val = payload.getField("1:");
            String str = JavaType.decodeString(val);
            if(str != null){
                setGameId(str);
            }
            else{
                setCorrupt();
            }
        }
        else{
            setCorrupt();
        }
        if(!isCorrupt() && payload.containsFieldKey("2:")){
            String str = payload.getField("2:");
            try{
                setScreenOffset(Integer.valueOf(str));
            }
            catch(NumberFormatException nfe){
                setCorrupt();
            }
        }
        else{
            setCorrupt();
        }
        if(!isCorrupt() && payload.containsFieldKey("3:")){
            String str = payload.getField("3:");
            try{
                setPlayerY(Integer.valueOf(str));
            }
            catch(NumberFormatException nfe){
                setCorrupt();
            }
        }
        else{
            setCorrupt();
        }
        if(!isCorrupt() && payload.containsFieldKey("4:")){
            String str = payload.getField("4:");
            try{
                setDeltaY(Integer.valueOf(str));
            }
            catch(NumberFormatException nfe){
                setCorrupt();
            }
        }
        else{
            setCorrupt();
        }
        if(!isCorrupt() && payload.containsFieldKey("5:")){
            String str = payload.getField("5:");
            try{
                setIndex(Integer.valueOf(str));
            }
            catch(NumberFormatException nfe){
                setCorrupt();
            }
        }
        else{
            setCorrupt();
        }
        if(!isCorrupt() && payload.containsFieldKey("6:")){
            String str = payload.getField("6:");
            try{
                setScore(Integer.valueOf(str));
            }
            catch(NumberFormatException nfe){
                setCorrupt();
            }
        }
        else{
            setCorrupt();
        }
    }

    public TapData(){
        this(true);
    }

    public TapData(boolean isSetDefault){
        super();
        gameIdIsSet = isSetDefault;
        gameId = new String();
        screenOffsetIsSet = isSetDefault;
        screenOffset = 0;
        playerYIsSet = isSetDefault;
        playerY = 0;
        deltaYIsSet = isSetDefault;
        deltaY = 0;
        indexIsSet = isSetDefault;
        index = 0;
        scoreIsSet = isSetDefault;
        score = 0;
    }

    public TapData(GolgiPayload payload){
        this(false);
        deserialise(payload);
    }

    public TapData(String payload){
        this(JavaType.createPayload(payload));
    }

}
