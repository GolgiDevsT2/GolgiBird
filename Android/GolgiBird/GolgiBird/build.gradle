apply plugin: 'android'

def AAR_ROOT = "$System.env.HOME" + '/Golgi-Apple-Pkg/v2-02-00/Android'
def JAR_DIR = "$System.env.HOME" + '/Golgi-Apple-Pkg/v2-02-00/common'
def GEN_DIR = 'src/main/java/io/golgi/example/gen'
// AAR_ROOT = "$System.env.HOME" + '/Dropbox/GOLGI-ANDROID-LOCAL-BUILD/'
repositories {
    mavenCentral()
    flatDir{
        dirs AAR_ROOT
    }
}

/*
 * The GolgiBird.Signage.gradle file looks like this (but with your
 * keystore file, passwords and aliases in the relevant
 * places:

 android {
    signingConfigs {

        playStoreConfig {
            storeFile file("/path/to/the/android.keystore")
            storePassword "password-for-the-keystore"
            keyAlias "alias-for-the-key-to-use"
            keyPassword "password-for-the-key"
        }
    }
}
  and it should be placed
  If you don't need to sign the APK
  Remove/Comment-Out the following 'apply from:' line and
  the signingConfig line android/buildTypes/Release

 */
apply from: '../../../GolgiBird.Signage.gradle'

android {

    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 7
        versionName "2.5"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            debuggable false
            signingConfig signingConfigs.playStoreConfig
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.google.android.gms:play-services:3.1.36'
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    compile ':golgi-support:2.2.0@aar'
//    compile ':golgi-support:9.99.99@aar'
}

task mkGenDir << {
    project.file(GEN_DIR).mkdir()
}

task mkKeyFiles <<{
    String appKey = project.file('../../../GolgiBird.AppKey').text;
    appKey = appKey.trim();
    String devKey = project.file('../../../GolgiBird.DevKey').text;
    devKey = devKey.trim();
    project.file(GEN_DIR + '/GolgiKeys.java').withWriter { out ->
        out.writeLine("/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */");
        out.writeLine("/* The previous line is to allow auto deletion */");
        out.writeLine("package io.golgi.example.gen;");
        out.writeLine("public class GolgiKeys{");
        out.writeLine("    public static final String DEV_KEY = \"" + devKey + "\";");
        out.writeLine("    public static final String APP_KEY = \"" + appKey + "\";");
        out.writeLine("}");
    }
}

task(cBuild, type: JavaExec) {
    main = 'com.openmindnetworks.golgi.garrick.Garrick'
    classpath fileTree(dir: JAR_DIR,
            includes: ['garrick_combined.jar'])
    args '-i', '../../../TapTelegraph.thrift', '-jo', GEN_DIR
}

task(cClean, type: JavaExec) {
    main = 'com.openmindnetworks.golgi.garrick.Garrick'
    classpath fileTree(dir: JAR_DIR,
            includes: ['garrick_combined.jar'])
    args '-clean', '-i', '../../../TapTelegraph.thrift', '-jo', GEN_DIR
}

clean.dependsOn cClean
preBuild.dependsOn cBuild
cBuild.dependsOn mkKeyFiles
mkKeyFiles.dependsOn mkGenDir


